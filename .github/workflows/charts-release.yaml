name: "Charts: Release"

concurrency: helm-release

on:
  workflow_dispatch:
    inputs:
      charts:
        description: >
          Charts to release. Comma-separated string.
          Defaults to releasing everything.
        default: "dnsendpoint-webhook"
        required: false

  push:
    branches:
      - main
    paths:
      - "charts/**"

env:
  HELM_VERSION: 3.17.2

jobs:
  prepare:
    name: Prepare data required for release
    #runs-on: ["self-hosted", "X64"]
    runs-on: ubuntu-latest
    outputs:
      charts-to-release: ${{ steps.collect-charts.outputs.charts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Collect charts to release
        uses: bjw-s-labs/helm-charts-actions/collect-charts@2025.2.0
        id: collect-charts
        with:
          repoConfigFile: ./.ci/repo-config.yaml
          overrideCharts: "[${{ inputs.charts }}]"

  release-charts:
    name: Release charts
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.12.0
        with:
          setup-tools: |
            helmv3
          helm: "${{ env.HELM_VERSION }}"

      - name: Package Helm Charts
        shell: bash
        env:
          SRC_DIR: "charts"
          DEST_DIR: "dest"
          REGISTRY: oci://ghcr.io/${{ github.repository_owner }}/charts
        run: |
          CHARTS=( $(yq --null-input e '${{ needs.prepare.outputs.charts-to-release }}[]' ) )

          for CHART in "${CHARTS[@]}" ; do
            mapfile -t CHART_PATH_PARTS < <(echo "$CHART" | tr '/' '\n')

            echo "Debug SRC_DIR"
            ls "${SRC_DIR}"
            echo "Debug Chart DIR"
            ls "${SRC_DIR}/${CHART}"

            export VERSION=$(yq .version "${SRC_DIR}/${CHART}/Chart.yaml")

            helm dep up "${SRC_DIR}/${CHART}"
            helm package "${SRC_DIR}/${CHART}" -u -d "${DEST_DIR}"
            helm push "${DEST_DIR}/${CHART}-${VERSION}.tgz" "${REGISTRY}"
          done
